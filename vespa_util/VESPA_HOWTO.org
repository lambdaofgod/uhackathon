#+title: Vespa_howto

* Docker setup

https://docs.vespa.ai/en/vespa-quick-start.html

** Run container

```
docker run --detach --name vespa --hostname vespa-container \
  --publish 8080:8080 --publish 19071:19071 \
  vespaengine/vespa
```

** Setting up Vespa CLI

Download vespa from
https://github.com/vespa-engine/vespa/releases/download/v8.302.40/vespa-cli_8.302.40_linux_amd64.tar.gz

It contains executable vespa in bin, move it to bin

*Vespa requires a folder for its file*
I've made ~/.vespa_home and set VESPA_CLI_HOME in bashrc

*Configure CLI*
vespa config set target local

* Apps

** Vespa examples app

After running

```
vespa clone album-recommendation examples/myapp && cd examples/myapp
```

*deploy*

```
vespa deploy --wait
```

*index*

`vespa feed ext/documents.jsonl`

*** Query

```
vespa query "select * from music where album contains 'head'" \
  language=en-US
```

** Configuring app using Python

https://blog.vespa.ai/turbocharge-rag-with-langchain-and-vespa-streaming-mode/

Go to examples/vespa_rag

There are two app_types: `colbert` and `semantic`

poetry run python vespa_app.py export_app $APP_TYPE $APP_TYPE

poetry run python vespa_app.py deploy_to_docker $APP_TYPE $APP_TYPE

poetry run python vespa_app.py add_documents_from_csv vespa_app/files/small_python_code_doc_coll.tsv -a $APP_TYPE

** Querying

#+BEGIN_SRC python :session VESPA_HOWTO.org  :exports both
from vespa.io import VespaQueryResponse
import json
from vespa.application import Vespa

query = "object detection"

topk = 25
app = Vespa(url="http://localhost", port=8080)
response:VespaQueryResponse = app.query(
    yql=f"select id,name,chunk,metadata from colbert where userQuery() or ({{targetHits:{topk*4}}}nearestNeighbor(embedding,q)) limit {topk}",
    groupname="admin",
    ranking="colbert",
    query=query,
    body={
        "presentation.format.tensors": "short-value",
        "input.query(q)": f"embed(e5, \"{query}\")",
        "input.query(qt)": f"embed(colbert, \"{query}\")",
    }
)
assert(response.is_successful())
results = json.dumps(response.hits[0], indent=2)
response.hits[0]["fields"]["metadata"]
#+END_SRC

#+RESULTS:
| repo_name | : | DetectionTeamUCAS/FCOS_GluonCV | id | : | 56 | tasks | : | [semantic segmentation, pedestrian detection, object detection] |

#+BEGIN_SRC python :session VESPA_HOWTO.org  :exports both
len(response.hits)
#+END_SRC

#+RESULTS:
: 25

#+BEGIN_SRC python :session VESPA_HOWTO.org  :exports both
[hit["fields"]["metadata"]["repo_name"] for hit in response.hits]
#+END_SRC

#+RESULTS:
| DetectionTeamUCAS/FCOS_GluonCV | DetectionTeamUCAS/FCOS_GluonCV | linspace100/AI_traffic_police | TencentYoutuResearch/PedestrianDetection-NohNMS | TencentYoutuResearch/PedestrianDetection-NohNMS | linspace100/AI_traffic_police | xytpai/DetX-FCOS | linspace100/AI_traffic_police | xytpai/DetX-FCOS | linspace100/AI_traffic_police | TencentYoutuResearch/PedestrianDetection-NohNMS | kinglintianxia/KittiSeg | xytpai/DetX-FCOS | facebookresearch/habitat-sim | xytpai/DetX-FCOS | wangguojun2018/CenterNet3d | lijx10/USIP | lijx10/USIP | skumar9876/FCRL | lijx10/USIP | lijx10/USIP | CSAILVision/semantic-segmentation-pytorch | cfzd/Ultra-Fast-Lane-Detection | bethgelab/notorious_difficulty_of_comparing_human_and_machine_perception | arbellea/DeepCellSeg |

* Troubleshooting

** Not enough space
By default writing to vespa will fail if the disk is >3/4 full.

This can be configured per app like here
https://pyvespa.readthedocs.io/en/latest/application-packages.html#Deploy-from-modified-files


* Configuring app in Python

#+BEGIN_SRC python :session VESPA_HOWTO.org  :exports both
from langchain.retrievers.vespa_retriever import VespaRetriever

vespa_query_body = {
    "yql": "select id,title,page,chunks from csvrag where userQuery() or ({targetHits:10}nearestNeighbor(embedding,q))",
    "hits": 5,
    "ranking": "hybrid",
    "locale": "en-us",
    "body": {
        "presentation.format.tensors": "short-value",
        "input.query(q)": "embed(e5, \"why is colbert effective?\")",
    }
}
vespa_content_field = "content"
retriever = VespaRetriever(app, vespa_query_body, "content")
#+END_SRC

#+RESULTS:
